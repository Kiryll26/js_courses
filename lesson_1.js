// ПРИМЕР 1
// ЧТО НУЖНО ЗНАТЬ
// 1.1 Числа, строки, логический тип
3 // = 3
1.5 // = 1.5
1 + 1 // = 2
8 - 1 // = 7
10 * 2 // = 20
35 / 5 // = 7

// Существует также логический тип.
true // правда
false // ложь

// Строки создаются при помощи кавычек
"Привет, мир!"

// Равенство ==
1 == 1; // = true
2 == 1; // = false

// Неравенство !=
1 != 1; // = false
2 != 1; // = true

// Другие операторы сравнения
1 < 10; // = true
1 > 10; // = false
2 <= 2; // = true
2 >= 2; // = true

// 1.2 Переменные
// Переменная - ящик (значение) с наклейкой (имя переменной)
// На ящик с гвоздями лучше наклеить табличку "гвозди",
// так и переменную лучше называть в соответствии с тем, что в ней хранится. Напр. name, age
kilometers = 10 // объявление переменной типа Number, которая хранит число километров
name = "banana" // объявление переменной типа String, которая хранит название фрукта

// 1.3 Вызов функций
// Программа - набор функций (команд). alert и prompt - функции
alert(kilometers) // показать значение переменной kilometers в диалоговом окне
minutes = prompt("Введите, сколько минут вас ждали") // отображение диалогового окна для ввода значения
// Переменной minutes мы присвоили значение, введенное в диалоговое окно после вызова функции prompt

// 1.4 Условная конструкция if-else
count = 1
if (count == 3) {
    // выполняется, если count равен 3
} else {
    // выполняется, если не 3
}

// Задача: программа-калькулятор тарифа такси
kilometers = prompt("Введите, сколько километров вы проехали")
if (kilometers == 0) {
  alert("Зачем вы вызвали такси?")
} else {
  minutes = prompt("Введите, сколько минут вас ждали")
  price = 2 + kilometers * 0.3 + minutes * 0.1
  alert(price)
}


// ПРИМЕР 2
// ЧТО НУЖНО ЗНАТЬ
// Переменные могут объявляться с ключевым словом let, так создаются не глобальные, а локальные переменные
let age = 18
// Инструкции могут заканчиваться точкой с запятой ;
let age = 18;
// Лучше использовать знак строгого равенства ===, который при сравнении учитывает тип данных
// вместо знака нестрогого равенства ==
"5" == 5; // = true
"5" === 5; // = false

// Задача: исправление недостатков ПРИМЕРА 1:
// 1. Использовались глобальные переменные, а не переменные объявленные с let
// 2. В конце строк не было знака ;
// 3. Строки, которые возвращает функция prompt, сравнивались с числами (оператор == вместо ===)

let zero = 0;
const kilometers = prompt("Введите, сколько километров вы проехали");
if (kilometers === String(zero)) {
  alert("Зачем вы вызвали такси?");
} else {
  let minutes = prompt("Введите, сколько минут вас ждали");
  const price = 2 + kilometers * 0.3 + minutes * 0.1;
  alert(price);
}

// ПРИМЕР 3.
// ЧТО НУЖНО ЗНАТЬ
// Для описания цикла используется ключевое слово for.

// Задача: посчет суммы чисел от 0 до заданного числа limitNumber
// Использование цикла for и функции console.log для вывода значения в консоль.
let limitNumber = 100;
let result = 0;
for (let i = 0; i < limitNumber; i = i + 1) {
  result = result + i;
}
console.log(result);

// ПРИМЕР 4
// while - сначала проверяем, выполняется ли условие, потом делаем
let name = prompt("Введите ваше имя")
while (name != "Саша") {
  name = prompt("Введите ваше имя")
}
// do-while - сначала делаем, потом проверяем, нужно ли снова делать.
// В некоторых случаях позволяет избавиться от дублирования кода
do {
  name = prompt("Введите ваше имя")
} while (name != "Саша")

// ПРИМЕР 5
// Описание простых функций.
// ЧТО НУЖНО ЗНАТЬ
// Мы уже знаем, что prompt и alert - это функции.
// При этом обе эти функции принимают один параметр - строку, которая должна отобразиться в появившемся диалоге.

// Мы можем объявить свою функцию.
// Функции в  JavaScript объявляются при помощи ключевого слова function.
// Данная функция принимает один параметр, который называется name.
// Далее она прибавляет name к "Привет, " и возвращает результат
function myFunction(name) {
  return "Привет, " + name;
}
myFunction("Саша"); // = "Привет, Саша"

// Область видимости переменных.
name = "banana"; // объявление глобальной переменной
let name = "banana"; // объявление локальной переменной с блочной видимостью (напр. видна только в блоке if)
var name = "banana"; // объявление локальной переменной с функциональной видимостью (видна только в данной функции)

// У переменной price в каждой функции и в блоке `if (true) {` свое значение,
// которое не пересекается с другими переменными price
function calcPrice(kilometers, minutes) {
  var price = 2;
  price = price + kilometers * 0.3;
  price = price + minutes * 0.1;
  if (true) {
    let price = 5;
  }
  return price;
}

function calcDebit() {
  var price = 9;
  price = price * 2;
}

var price = 0;
alert(calcPrice(2, 3));

// ПРИМЕР 6
// ЧТО НУЖНО ЗНАТЬ
// Увеличить значение числа на 1 можно при помощи операторов ++ и +=
let i = 0;
i++; // сейчас значение i равно 1
i += 10; // сейчас значение i равно 11
// Иногда строки нужно приводить к числам и наоборот
Number("123"); // = 123
String(123); // = "123"

// Задача: подсчет суммы чисел от 0 до заданного числа при помощи функции
function calcSum(num) {
  let result = 0;
  for (let i = 0; i < num; i++) {
    result += i;
  }
  return result;
}

let num = Number(prompt("Введите число"));
let sum = calcSum(num);
alert(sum);

// ПРИМЕР 5
// ЧТО НУЖНО ЗНАТЬ
// Оператор ** используется для возведения в степень.
2 ** 3; // = 8

// Задача: вывод кубов чисел от 0 до заданного числа с шагом 3
function showCub(num) {
  let result = "";
  for (let i = 1; i < num; i += 3) {
    result += String(i ** 3) + ", ";
  }
  console.log(result);
}
showCub(100);
